; This little helper contains the code to be transferred in the Ethernet
; packet after data has been transferred via the dma_load_routine.

	; Routine sits at beginning of UDP payload in the Ethernet buffer
	; mapped at $6800
	; Packet size:      2 bytes
	; Ethernet header: 14 bytes
	; IPv6 header:     40 bytes
	; UDP header:       8 bytes
	.alias start_address $6800 + 2 + 14 + 40 + 8
	.org start_address

	.alias tmpbuffer $dbf0

entry:

	; Dummy inc $d020 jmp *-3 routine for debugging
;	lda #$00
;	inc $d020
;*
;	jmp -

	; Production routine that skips the jmp *-3 loop
	lda #$00
	nop
	nop
	nop
	nop
	nop
	nop

	; Enable mega65 I/O personality
	lda #$47
	sta $d02f
	lda #$53
	sta $d02f

	; Wait for TX ready
*
	lda $d6e1
	and #$10
	beq -

	sta $d707 ; trigger in-line DMA
	; Use chained DMA to copy packet to TX buffer, and then send it
	; so that we can get what will effectively be an ACK to each
	; packet received by the MEGA65.
	.byte $0b	   ; enforce F018B format
	.byte $80, $ff
	.byte $81, $ff
	.byte $00      ; DMA end of option list
	.byte $04      ; DMA copy, chained
	.word $043e    ; DMA byte count 
	.word $e802    ; DMA source address (bottom 16 bits) 
	.byte $8d      ; DMA source bank and flags ($8x = I/O enabled)
	.word $e800    ; DMA destination address (bottom 16 bits)
	.byte $8d      ; DMA destination bank and flags
	.byte $00      ; DMA sub command
	.word $0000    ; DMA modulo (ignored)

	; Use DMA to swap MAC addresses
	.byte $00      ; DMA end of option list
	.byte $04      ; DMA copy, chained
	.word $0006    ; DMA byte count 
	.word $e808    ; DMA source address (bottom 16 bits) 
	.byte $8d      ; DMA source bank and flags ($8x = I/O enabled)
	.word $e800    ; DMA destination address (bottom 16 bits)
	.byte $8d      ; DMA destination bank and flags
	.byte $00      ; DMA sub command
	.word $0000    ; DMA modulo (ignored)

	.byte $00      ; DMA end of option list
	.byte $00      ; DMA copy, end of chain
	.word $0006    ; DMA byte count 
	.word $36e9    ; DMA source address (bottom 16 bits), ffd36e9 = MACADDRx registers
	.byte $8d      ; DMA source bank and flags ($8x = I/O enabled)
	.word $e806    ; DMA destination address (bottom 16 bits)
	.byte $8d      ; DMA destination bank and flags
	.byte $00      ; DMA sub command
	.word $0000    ; DMA modulo (ignored)

	; Code resumes after DMA list here

	; basepage = $68xx, so we can use basepage addressing for reading/writing the ethernet buffer
	lda #$68
	tab

	; Reverse port numbers
	; Note that reading is accessing rx buffer (starts at 6802), while writing
	; accesses the tx buffer (starts at 6800).
	lda $38
	sta $38
	lda $39
	sta $39

	lda $3a
	sta $36
	lda $3b
	sta $37

	; Set packet len
	lda #$3e
	sta $d6e2
	lda #$04
	sta $d6e3

	; swap src/dst ip addresses (no need to recalc ip chks as this change won't alter it)
	; $1c - $1f = rx src ip
	; $20 - $23 = rx dst ip
	; $1a - $1d = tx src ip
	; $1e - $21 = tx dst ip
	ldx #$0f
*
	lda $18,x
	sta $26,x
	lda $28,x
	sta $16,x
	dex
	bpl -	

	; 5. TX packet
	lda #$01
	sta $d6e4

	; restore basepage
	lda #$00
	tab

	; check if image filename was provided
	lda d81filename
	beq copy_reset_routine

	; backup page at $200 to colour ram
	sta $d707
	.byte $81, $ff ; dst mb
	.byte $00      ; end of job options
	.byte $00      ; copy
	.word $18      ; count
	.word $0200    ; src
	.byte $00      ; src bank
	.word $7F00    ; dst
	.byte $08      ; dst bank
	.byte $00      ; cmd hi
	.word $0000    ; modulo / ignored

	ldx #$17
*	lda d81filename,x
	sta $0200,x
	dex
	bpl -

	; set d81 filename
	ldy #$02
	lda #$2e
	sta $d640
	clv
	; attach d81 image
	lda #$40
	sta $d640
	clv

	; restore page at $200 from colour ram
	sta $d707
	.byte $80, $ff ; src mb
	.byte $00      ; end of job options
	.byte $00      ; copy
	.word $18      ; count
	.word $7F00    ; src
	.byte $08      ; src bank
	.word $0200    ; dst
	.byte $00      ; dst bank
	.byte $00      ; cmd hi
	.word $0000    ; modulo / ignored

copy_reset_routine:
	; copy reset routine to tmpbuffer
	ldx #jump_routine_end - jump_routine
*	lda jump_routine-1,x
	sta tmpbuffer-1,x
	dex
	bne -

	jmp tmpbuffer
d81filename:
	.dword 0, 0, 0, 0

; this routine resets all mappings and jumps into the provided address
jump_routine:
	lda #$00
	ldx #$0f
	tay
	ldz #$0f
	map
	eom

	tax
	taz
	map
	eom

jump_addr:
	jmp $0000
jump_routine_end:

	.advance start_address + $3fe, $00
seq_num:
	.advance start_address + $400, $00
