; This little helper contains the code to be transferred in the Ethernet
; packet after data has been transferred via the dma_load_routine.

	; Routine sits at beginning of UDP payload in the Ethernet buffer
	; mapped at $6800
	; Packet size:      2 bytes
	; Ethernet header: 14 bytes
	; IPv6 header:     40 bytes
	; UDP header:       8 bytes
	.alias start_address $6800 + 2 + 14 + 40 + 8
	.org start_address

entry:

	; Dummy inc $d020 jmp *-3 routine for debugging
;	lda #$00
;	inc $d020
;*
;	jmp -

	; Production routine that skips the jmp *-3 loop
	lda #$00
	nop
	nop
	nop
	nop
	nop
	nop

	; Enable mega65 I/O personality
	lda #$47
	sta $d02f
	lda #$53
	sta $d02f

	; Wait for TX ready
*
	lda $d6e1
	and #$10
	beq -

	sta $d707 ; trigger in-line DMA
	; Use chained DMA to copy packet to TX buffer, and then send it
	; so that we can get what will effectively be an ACK to each
	; packet received by the MEGA65.
	.byte $80, $ff
	.byte $81, $ff
	.byte $00      ; DMA end of option list
	.byte $04      ; DMA copy, chained
	.word $043e    ; DMA byte count 
	.word $e802    ; DMA source address (bottom 16 bits) 
	.byte $8d      ; DMA source bank and flags ($8x = I/O enabled)
	.word $e800    ; DMA destination address (bottom 16 bits)
	.byte $8d      ; DMA destination bank and flags
	.byte $00      ; DMA sub command
	.word $0000    ; DMA modulo (ignored)

	; Use DMA to swap MAC addresses
	.byte $00      ; DMA end of option list
	.byte $04      ; DMA copy, chained
	.word $0006    ; DMA byte count 
	.word $e808    ; DMA source address (bottom 16 bits) 
	.byte $8d      ; DMA source bank and flags ($8x = I/O enabled)
	.word $e800    ; DMA destination address (bottom 16 bits)
	.byte $8d      ; DMA destination bank and flags
	.byte $00      ; DMA sub command
	.word $0000    ; DMA modulo (ignored)

	.byte $00      ; DMA end of option list
	.byte $00      ; DMA copy, end of chain
	.word $0006    ; DMA byte count 
	.word $36e9    ; DMA source address (bottom 16 bits), ffd36e9 = MACADDRx registers
	.byte $8d      ; DMA source bank and flags ($8x = I/O enabled)
	.word $e806    ; DMA destination address (bottom 16 bits)
	.byte $8d      ; DMA destination bank and flags
	.byte $00      ; DMA sub command
	.word $0000    ; DMA modulo (ignored)

	; Code resumes after DMA list here

	; basepage = $68xx, so we can use basepage addressing for reading/writing the ethernet buffer
	lda #$68
	tab

	; Reverse port numbers
	; Note that reading is accessing rx buffer (starts at 6802), while writing
	; accesses the tx buffer (starts at 6800).
	lda $38
	sta $38
	lda $39
	sta $39

	lda $3a
	sta $36
	lda $3b
	sta $37

	; Set packet len
	lda #$3e
	sta $d6e2
	lda #$04
	sta $d6e3

	; swap src/dst ip addresses (no need to recalc ip chks as this change won't alter it)
	; $1c - $1f = rx src ip
	; $20 - $23 = rx dst ip
	; $1a - $1d = tx src ip
	; $1e - $21 = tx dst ip
	ldx #$0f
*
	lda $18,x
	sta $26,x
	lda $28,x
	sta $16,x
	dex
	bpl -	

	; 5. TX packet
	lda #$01
	sta $d6e4

	; restore basepage
	lda #$00
	tab

	; Disable C65 ROM write protection via Hypervisor trap
	lda #$02
	sta $d641
	clv

	; close all hyppo file descriptors
	lda #$22
	sta $d640
	clv

	lda enable_default_rom_load
	beq mount_d81

	; copy rom filename to bank 0
	ldx #$0b
*	lda romfilename,x
	sta $0200,x
	dex
	bpl -
	; set rom filename
	ldy #$02
	lda #$2e
	sta $d640
	clv
	; load rom file to $20000
	lda #$00
	tax
	tay
	ldz #$02
	lda #$36
	sta $d640
	clv

mount_d81:
	; unmount current images
	lda #$42
	sta $d640
	clv
	; set default d81 image name
	lda d81filename
	beq map_crom
	ldx #$3f
*	lda d81filename,x
	sta $0200,x
	dex
	bpl -
	; set d81 filename
	ldy #$02
	lda #$2e
	sta $d640
	clv
	; attach d81 image
	lda #$40
	sta $d640
	clv

map_crom:
	; Disable $c000 mapping via $d030 as we want to write to interface rom.
	; Writing to rom is not possible via $d030. We'll use map for writing instead.
	lda #%00100000
	trb $d030

	; unmap maphmb, while keeping maplmb
	; this is to keep our own routine available at $6000 (mapped from $ffde000)
	lda #$ff
	ldx #$0f
	ldy #$00
	ldz #$0f
	map

	; keep mapping of $ffde000-$ffdffff at $6000
	; MAPs are offset based, so we need to subtract $6000 from the target address
	; $de000 - $6000 = $d8000
	lda #$80
	ldx #$8d
	; mapping of interface rom $2c000 at $c000
	; (enables writing to rom, but also hides i/o for now as a side effect)
	ldy #$00
	ldz #$42
	map
	eom

	; copy autostart routine to $c700
	ldx #autostart_end - autostart_target
*	lda autostart-1,x
	sta autostart_target-1,x
	dex
	bne -

	lda #>autostart_target
	tab
	; 32 bit address for rom access
	; backup basic irq vector
	ldz #$00
	; ldq [<basic_irq_pointer],z
	neg
	neg
	nop
	lda (<basic_irq_pointer),z
	; stq basic_irq_backup
	neg
	neg
	sta basic_irq_backup

	; backup first two bytes of basic program (will be zeroized by basic reset)
	ldz #$00
	; ldq [<basic_program_start_pointer],z
	neg
	neg
	nop
	lda (<basic_program_start_pointer),z

	; stq basic_program_start_backup
	neg
	neg
	sta basic_program_start_backup

	; backup cartridge signature byte
	lda $8004
	sta cartridge_backup
	lda enable_cart_signature
	bne +
	lda #$00
	sta $8004
*

	; only execute following code if we actually want to load a prg
	lda restore_prg
	beq finalize
	; patch basic irq vector at $32007 to jump into our autostart code
	lda #<autostart_entry
	ldz #$00
	; sta ((<basic_irq_pointer)),z
	nop
	sta (<basic_irq_pointer),z
	inz
	lda #>autostart_entry
	; sta ((<basic_irq_pointer)),z
	nop
	sta (<basic_irq_pointer),z

finalize:
	; unmap $c000 rom to make I/O available again
	; while keeping ourselves mapped at $6000
	lda #$80
	ldx #$8d
	ldy #$00
	ldz #$00
	map
	eom

	; activate $c000 rom read-only again via $d030
	lda #%00100000
	tsb $d030
	
	; restore rom write protection
	lda #$00
	sta $d641
	clv

	; bp=zp
	lda #$00
	tab

	; unmap SD sector buffer
	lda #$82
	sta $d680

	; disable seam
	lda #$d7
	trb $d054

	; reset palette selections
	lda #$00
	sta $d070

	; disable SPRENV400
	sta $d076
	
	; NOBUGCOMPAT
	lda #%00100000
	trb $d07a

	; HOTREG enable & RSTDELEN
	lda #%11000000
	tsb $d05d

	; set PAL/NTSC
	lda #$80
	ldx set_video_mode
	beq ++		; no change
	bmi +
	trb $d06f	; PAL
	bra ++
*
	tsb $d06f	; NTSC
*

	; 40 column mode normal C64 screen
	lda #$00
	sta $d031
	lda #%00000011
	tsb $dd00
	lda #$c0    ; also enable raster delay to match rendering with interrupts more correctly
	sta $d05d
	lda #$1b
	sta $d011
	lda #$c8
	sta $d016
	lda #$14
	sta $d018

	; reset I/O to C64 mode
	lda #$00
	sta $d02f

	; default C64 banking
	lda #$3f
	sta $00
	sta $01

	; default stack location
	ldx #$ff
	ldy #$01
	txs
	tys

	; only use 8-bit stack
	see

	jmp reset_mega65

romfilename:
	.byte "MEGA65.ROM", 0, 0
d81filename:
	; reserve 64 bytes for max. filename length
	.dword 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
enable_default_rom_load:
	.byte $01
restore_prg:
	.byte $01
set_video_mode:
	.byte $00	; $00 = no change, $01 = PAL, $ff = NTSC

autostart:
; autostart routine called in irq after bootup of kernal and basic is complete.
; will be copied and run from rom at $2c700, mapped via $d030 to $c700
.org $c700

autostart_target:

filesize:
	.word $0000
do_run:
	.byte $00
enable_cart_signature:
	.byte $00
basic_irq_pointer:
	.dword $00032007
basic_irq_backup:
	.dword $00000000
basic_program_start_pointer:
	.dword $00002001
basic_program_start_backup:
	.dword $00000000
cartridge_address:
	.dword $00008004
cartridge_backup:
	.byte $00

reset_mega65:
	lda #$00
	ldx #$0f
	ldy #$00
	ldz #$0f
	map

	lda #$00
	ldx #$00
	ldy #$00
	ldz #$00
	map
	eom

	jmp ($fffc)

autostart_entry:
	sei
	lda #>autostart_target
	tab
	; restore basic start bytes
	; ldq basic_program_start_backup
	neg
	neg
	lda basic_program_start_backup
	; stq ((<basic_program_start_pointer))
	neg
	neg
	nop
	sta (<basic_program_start_pointer),z

	; restore cartridge signature byte
	ldz #$00
	lda cartridge_backup
	; sta ((<cartridge_address)),z
	nop
	sta (<cartridge_address),z

	; Disable C65 ROM write protection via Hypervisor trap
	lda #$02
	sta $d641
	clv
	
	; restore basic irq vector
	; ldq basic_irq_backup
	neg
	neg
	lda basic_irq_backup
	; stq ((<basic_irq_pointer))
	neg
	neg
	nop
	sta (<basic_irq_pointer),z

	; restore rom write protection
	lda #$00
	sta $d641
	clv

	lda #$00
	tab

	; set top of basic text pointer
	lda filesize
	sta $82
	lda filesize+1
	sta $83

	lda do_run
	beq back_to_basic

	; simulate RUN<cr>
	lda #$52
	sta $2b0
	lda #$55
	sta $2b1
	lda #$4e
	sta $2b2
	lda #$0d
	sta $2b3
	lda #$04
	sta $d0

back_to_basic:
	cli
	jmp $2006

autostart_end:

	.org autostart + autostart_end - autostart_target
	.advance start_address + $3fe, $00
seq_num:
	.advance start_address + $400, $00
